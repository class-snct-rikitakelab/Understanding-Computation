# SIMPLE用のTreetopの文法の削減版。
# 文字列 'while (x < 5) { x =x * 3 }' を構文解析するために必要な規則だけが含まれるもの。


grammar Simple
rule statement
while / assign
end
rule while
'while (' condition:expression ') { ' body:statement ' }' {
def to_ast
While.new(condition.to_ast, body.to_ast)
end
}
end
rule assign
name:[a-z]+ ' = ' expression {
def to_ast
Assign.new(name.text_value.to_sym, expression.to_ast)
end
}
end
rule expression
less_than
end
rule less_than
left:multiply ' < ' right:less_than {
def to_ast
LessThan.new(left.to_ast, right.to_ast)
end
}
/
multiply
end
rule multiply
left:term ' * ' right:multiply {
def to_ast
Multiply.new(left.to_ast, right.to_ast)
end
}
/
term
end
rule term
number / variable
end
rule number
[0-9]+ {
def to_ast
Number.new(text_value.to_i)
end
}
end
rule variable
[a-z]+ {
def to_ast
Variable.new(text_value.to_sym)
end
}
end
end

# 少しだけRubyに似ているが、似ているのは見かけだけで、文法は特殊なTreetop言語で書かれている。
# rule句は特に文法の構文解析に関する新しい規則を導入し、各rule句の中の式にはパターンマッチする文字列の構造を記述します。
# 規則は他の規則を再帰的に呼び出すことができ(たとえばwhileの規則は式と文の規則を呼び出す)、上にある規則から順に構文解析が始まります。

# 式の文法規則が互いに演算子を呼んだときの順序は、SIMPLEの演算子の優先順位を反映する。
# 式の規則は less_thanを呼ぶとき、優先順位が低い<演算子が文字列と比較される前に、
# *演算子が文字列と比較され、multiplyを呼ぶ機会が訪れる。
# つまり '1 * 2 < 3' は '1 * (2 < 3)' ではなく ' (1 * 2) < 3 ' として構文解析されます。

	# ことを簡単にするために、この文法はどの式が別の式の中に発生することができるかについて考慮しない。
	# これはパーサが明らかに間違っているプログラムも受け入れることを意味する。
	# 不正なプログラムの検出は、9章で行う。

# 文法の規則の大部分は、{}の中にRubyのコードでアノテーションがつけられています。
# それぞれのコードは、#to_astメソッドを定義し、これはTreetopがSIMPLEのプログラムを構文解析し、対応した構文オブジェクトが作られたときに使うことができるようになる。



