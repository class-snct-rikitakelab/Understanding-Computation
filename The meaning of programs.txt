計算とは何だろう。この言葉の意味は人それぞれで違うだろう、
しかしコンピューターがプログラムを読み、動かし、何かを入力、そして出力するとき
ある種の計算が確実に起こってると言うことは皆同じ考えだろう。
それは私たちにちゃんとした起点を与えてくれる。計算はコンピュータがやることに付けた名前である。
よく知られた種の計算を起こせるようにする環境を作るために、我々は3つの基本的な構成要素を知る必要がある
・計算をすることが可能である機械
・機械が理解できる命令を書くための言語
・その言語で書かれた、機械が正確に計算をすることが可能であるように記述されているプログラム
そういうわけでこの本のこのパートは機械、言語、プログラムについてです。
それらが何なのか、どのように振る舞うか、どのように作り学べば良いのか、
そしてどのように我々が利用すると役に立つのかです。
これら3つの構成要素を研究することにより、計算とは何か、何が起こるのかに対しての直感を発展させることができます。


2章
考えるな、感じろ!それは月を指さすようなものだ。
指に集中し過ぎるな、その先の栄光の全てが得られぬぞ
ブルース・リー

我々が書くプログラム言語とそのプログラムは我々のソフトウェアエンジニアとしての仕事に無くてはならないものだ。
我々は入り組んだ案をはっきりさせるため、お互いに案を理解し合うため、そして一番重要である、コンピュータで案を実行するためそれらを使用する。
人間社会では自然言語なしでは成り立たないのと同じように、プログラマーのグローバル社会では
アイデアを伝送、実行するためのプログラム言語を頼っている。
そしてよくできたプログラムは次のプログラムを構築するための土台となる。

プログラマーは現実的な傾向がある、現実的な生き物だ。
我々は、プログラムが何を意味するかを考えず、資料を読み、指導に沿い、あるプログラムを勉強し、
そして自身で単純なプログラムをいじる事によって新しいプログラム言語を学ぶことがよくある。
時々その学び方は多くの試みと謝りを感じるつまり我々は言語の一部を説明と資料を見て覚えようとする
そのうえ何かを書こうとし、そしてすべて無駄にし、戻り、何かをうまく組立て作用するまでもう一度やらないといけなくなる。
プログラマが扱うコンピュータとシステムますます複雑になり、
それはプログラムをはっきりしない呪文のようで自身で表現され偶然動いてるように考えるようプログラマを誘惑する。

しかしコンピュータプログラミングは本当はプログラムではなくアイデアである。
プログラムは凍結させたアイデアの表現であり、瞬間的に存在したプログラマーの考えの構造のスナップショットである。
プログラムは意味があるから書く価値がある。何がコードの意味をつなぎ合わせているのか、
どのようにすれば、"やることをやっているだけ"と言うより、プログラムの意味をより明確にできるだろうか。
この章ではコンピュータのプログラムの意味を決定的にするための少しの技術に着目し、またどのように死んだスナップショットを生かすかを確かめていく。

意味の"意味"

言語上では、意味論は言語とその意味との関係についての学問である。
例えば"犬"と言う言葉は書物の形をアレンジしたものであり誰かの声帯によっておこされる空気の振動の連鎖でありそれらは
実際の犬や一般的な犬の見解とは非常に異なったものである。
意味論はどのようにこれらの能記がそれらの抽象的な意味や抽象的な意味の基本的性質をどのように関連付けるかに関心がある。

コンピューターサイエンスでは、公式の意味論の分野は、プログラム言語に関して興味深いことの発見や
それらを使用してプログラミング言語の面白い点の発見あるいは証明をすることに関心がある。
形式意味論は仕様に広い範囲があり、アプリケーションの新しい言語の仕様化やコンパイラの最適化の工夫についての明記から
プログラムのプログラムの正確さによる構成された数学的証明のような抽象的なものまである。

完璧なプログラム言語の明治のためには我々は二つのことを提供する必要がある。
プログラムはどのようなものかについての統語論とプログラムが何を意味するかの意味論である。

多くの言語には公式で書かれた説明書はなく、インタプリタまたはコンパイラのみある。
Ruby自身は実行の詳細の項目が含まれている。
既にこれらはどのように運用を考えるかについての多くの本やチュートリアルがあり、
これの全ての説明の究極の源は言語のリファレンス実装であるMatx's Ruby インタプリタがある。
もし少しでもRubyの資料がMRIに事実上の反対の振舞をしていたらそれは間違いの資料である。
JRubyやRubinius、そしてMacRubyのようなRubyの実行のサードパーティはMRIの正確な手本として振る舞うため頑張らなくてはいけない。
そうすることでこのRuby実装はRuby言語に適合すると言える。
PHPやPerl5のような他の言語も同様に実装による言語定義というアプローチをとっている。

もう一つのプログラム言語の説明の方法は公式の散文の説明書を書くことである。(普通は英語で)
C++、JavaそしてECMAScript(JavaScriptの標準化されたヴァージョン)はこれに近い例がある。
言語らは実施の不可知論である、優秀な委員会によって書かれた資料で標準化されており
多くの適合した実行の基準が存在する。公式の資料で言語を明示する方が、リファレンス実装に頼るより正確である。
そこの設計判断は特定の実装からの偶然の結果であるよりも熟考され道理をわきまえた決定である可能性が高い。
しかしその設計書は非常に読むのが困難であることが多く、矛盾、脱落もしくは曖昧さが
あるかどうか説明するのがとても困難となりえる。特に英語の言語の説明書を検証するための形式的手法は存在しない。
私たちはちょうどそれを読み、それについて沢山考え、全ての結果を想定したと期待するしかない。

3つめの選択肢は性格にプログラム言語の意味を発見する形式意味論の数学的技術の使い方についてである。
ここのゴールは完全にあいまいさをなくすこと、適正な規則正しい解析、さらには自動解析に即して説明書をかけることである。
そうすることでそれは矛盾、否定、手落ちを理解力を示してチェックできる。
我々はそれらの意味論仕様に対する形式アプローチを構文がどのように扱われるか見てから見よう。

構文

型にはまったコンピュータのプログラムは長い文字列である。
あらゆるプログラミング言語は何の種類かの文字列がその言語で有効かを記述したルールの集まりから来ている。
これらのルールは構文と呼ばれる。

言語の構文ルールはy=x+1のような有効かもしれないプログラムや>/;x:1@4のような無意味なものと区別を可能にしている。
これらもまたあいまいなプログラムの読み方に関する役に立つ情報を提供している。
管理者の先行に関するルール、例として１＋２＊３を(1+2)*3ではなく1+(2*3)と書かれているとみなすことが
自動的に決定するものである。
コンピュータプログラムが意図していることは勿論コンピュータによって読まれることである。
またプログラムを読むのにはパーサが必要となる。プログラムが表現された文字列をよみ、それらが有効であるか構文ルールに反しているか
またそれが更なる適当な組み立てられた表現に変化するプログラムであるかチェックする。

自動で言語の構文ルールをパーサへ変えてくれるいろいろな道具がある。
どのようにこれらのルールの書き方の詳細とパーサでこれらを使えるようにするテクニックについてはこの章では説明しないが
パーサはy=x+1のような文字列やそれをASTへと変えるべきである。
抽象構文木とは空白を取り除き、階層的な構造に集中するようにしたソースコードの表現である。

終わりに、構文はそれらの意味ではなくプログラムの表面の姿と関係している。
それはプログラムが役に立たないものより構文に関して有効であることがふさわしい。
例えばプログラムy=x＋１は自身の意味を持たない。なぜならxはあらかじめ何が貼っているか分からないからである、
またz=true+1は実行したとき壊れるだろう、なぜならそれはBooleanの値へ数字を加算しようとしているからである。
当然のことですが、プログラム言語の構文の基底にある意味がどのように一致するかについての説明の一つの正しい道はありません。
実はプログラムが何を意味するか具体的に話すことにいくつかの違う道があり
それらは堅苦しさ、抽象概念、効果さ、そして実際的な効率の間を交換している。
次のセクションでは云々

操作的意味論

プログラムの意味を考えるうえで最も実践的な道はそれが何をしているか、我らがプログラムを動かしている間
私たちは何が起こることをよきするかである。
プログラム言語の実行時間の振る舞いにどのような違った構造があるかまたより大きなプログラムを一緒に
接続したときどのような結果になるか。
これは操作的意味論の基本である。プログラムがいくつかのデバイスでどのように動作するかを明確にすることで
プログラム言語の意味の捉える方法の一つである
このデバイスはよく抽象機械と呼ばれ、プログラムがいくつかのデバイスで
どのように動作するかの説明を明確な目的としてデザインされた明確な想像上の理想のコンピュータである。
違う種類のプログラム言語は普通、実行時間の振舞をきちんととらえるための違うデザインの抽象機械を必要としている

操作的意味論を与えることによって、我らは全く正確で規則通りの言語の特有の構成物の目的について正確にできる。
隠れたあいまいさや重要なエッジケースが抜けていることのある英語で書かれた説明書とは違い、
形式的仕様は言語の振舞を説得力がある伝達をするため明白で曖昧さがないものである必要がある。

スモールステップ意味論
どのように抽象的な機械をデザインし、プログラミング言語の仕様を明示して使おうか。
1つのやり方は構文を小さなステップで繰り返し減少させることでプログラムを評価する機械を考えることである。
ステップを費やすことで最終結果に近づいていき、意味するものへ近づいていく。
これらのスモールステップの縮小は私たちが学校で習った代数式の評価方法に似ている。
例えば（１＊２）＋（３＊４）の表家で、我らはこうすべきことを知っている。
1.左の掛け算をやり、式を2+(3*4)減らす
2.右の掛け算を行い式を2+12に減らす
3.足し算をやり、14となり終了する
１４は結果と考えることが出来る、なぜならこの過程で更に減らすことが出来ないからである。
我らは14を特別な種の、自身の意味のみ所持する代数の式であり、これ以上必要としない。

このような略式の過程は小さい縮小のステップをどのように進めるかの形式的規則を書き記すことで操作的意味論に変わる。
これらのルールはこれら自身でいくつかの言語(メタ言語)として書き記すことが出来る、それは普通数字の表記となる。
この章では我らはおもちゃレベルの言語の意味論について調べる。

数学的に話すと、これはSIMPLEの抽象構文木の削減の関係を定義する一組の推論のルールである。
実際に話すとこれは奇妙な象徴の束にしかみえずコンピュータプログラムの意味について何も理解できるように見えません
この形式的表記を直接理解しようとする代わりに、同じ規則をRubyで書く方法を調べました。
メタ言語のためにRubyを使用するのは、プログラマにとって理解するのにより簡単である
しかも実行することでどのように規則が働くのか分かるという利点があります。